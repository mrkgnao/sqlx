use std::future::Future;

use futures_core::future::BoxFuture;
use futures_core::stream::BoxStream;

use crate::database::{Database, HasRow};

/// Represents a result set, which is generated by executing a query against the database.
///
/// A `Cursor` can be created by either [`Executor::execute`](trait.Execute.html) or
/// [`Query::fetch`](struct.Query.html).
///
/// Initially the `Cursor` is positioned before the first row. The `next` method moves the cursor
/// to the next row, and because it returns `None` when there are no more rows, it can be used
/// in a `while` loop to iterate through all returned rows.
pub trait Cursor<'a>
where
    Self: Send,
    // `.await`-ing a cursor will return the affected rows from the query
    Self: Future<Output = crate::Result<u64>>,
{
    type Database: Database;

    /// Fetch the first row in the result. Returns `None` if no row is present.
    ///
    /// Returns `Error::MoreThanOneRow` if more than one row is in the result.
    fn first(self) -> BoxFuture<'a, crate::Result<Option<<Self::Database as HasRow<'a>>::Row>>>;

    /// Fetch the next row in the result. Returns `None` if there are no more rows.
    fn next(&mut self) -> BoxFuture<crate::Result<Option<<Self::Database as HasRow>::Row>>>;

    /// Map the `Row`s in this result to a different type, returning a [`Stream`] of the results.
    fn map<T, F>(self, f: F) -> BoxStream<'a, crate::Result<T>>
    where
        F: Fn(<Self::Database as HasRow>::Row) -> T;
}
